package handlers

import (
	"encoding/base64"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/ubirch/ubirch-client-go/main/config"
	"github.com/ubirch/ubirch-protocol-go/ubirch/v2"

	h "github.com/ubirch/ubirch-client-go/main/adapters/http_server"
)

var (
	testUuid          = uuid.MustParse("63d97684-1a63-44a8-8fc2-3016f87c1504")
	testAuth          = "123456"
	testSecret, _     = base64.StdEncoding.DecodeString("ZQJt1OC9+4OZtgZLLT9mX25BbrZdxtOQBjK4GyRF2fQ=")
	conf              = &config.Config{SecretBytes32: testSecret}
	testHash          = h.Sha256Sum{0x41, 0x2c, 0xf8, 0xec, 0xb7, 0xb9, 0x41, 0xaa, 0x2b, 0x71, 0x1d, 0x40, 0xab, 0x68, 0xc4, 0x69, 0x36, 0x25, 0xe, 0x76, 0x67, 0x41, 0xd6, 0xfa, 0xeb, 0x31, 0xc5, 0x9d, 0x6b, 0xb0, 0x20, 0xfb}
	testPrevSignature = []byte{0xb6, 0x2b, 0xc0, 0x1a, 0xc9, 0xe5, 0xb1, 0xd8, 0x97, 0x73, 0x6f, 0xf9, 0x87, 0x7b, 0x43, 0x75, 0x3c, 0xb7, 0xbd, 0x57, 0xb1, 0xb0, 0x47, 0x7e, 0x87, 0xdc, 0x47, 0x34, 0x20, 0x25, 0x94, 0xf5, 0x4a, 0xfb, 0x78, 0x28, 0x3e, 0xf8, 0x9, 0xbf, 0x9f, 0x72, 0xbc, 0x5d, 0x55, 0x6f, 0x66, 0x5b, 0xb1, 0xff, 0x11, 0x7e, 0x59, 0x22, 0x1d, 0xe3, 0xea, 0x3a, 0xb3, 0x57, 0x3e, 0x5f, 0xe9, 0xd0}
	testPublicKey     = []byte{0xcf, 0x7a, 0x83, 0x56, 0x99, 0x3, 0x97, 0x57, 0x4f, 0xde, 0xc2, 0xb4, 0x2a, 0xcb, 0x31, 0x2d, 0x62, 0xc8, 0x2, 0xcf, 0xce, 0x1a, 0xe7, 0xb8, 0x12, 0xa, 0xf3, 0xa5, 0x59, 0x30, 0x52, 0x31, 0x9, 0xa2, 0x35, 0xa5, 0xfc, 0xef, 0x2, 0x5, 0x1e, 0x98, 0x57, 0x1e, 0xc1, 0xef, 0x2b, 0x94, 0x9c, 0xad, 0xb9, 0x7e, 0xab, 0x7d, 0xfd, 0xdf, 0x13, 0xb8, 0xf7, 0x18, 0x19, 0x27, 0x82, 0xab}
	testPublicKeyPEM  = []byte{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x46, 0x6b, 0x77, 0x45, 0x77, 0x59, 0x48, 0x4b, 0x6f, 0x5a, 0x49, 0x7a, 0x6a, 0x30, 0x43, 0x41, 0x51, 0x59, 0x49, 0x4b, 0x6f, 0x5a, 0x49, 0x7a, 0x6a, 0x30, 0x44, 0x41, 0x51, 0x63, 0x44, 0x51, 0x67, 0x41, 0x45, 0x7a, 0x33, 0x71, 0x44, 0x56, 0x70, 0x6b, 0x44, 0x6c, 0x31, 0x64, 0x50, 0x33, 0x73, 0x4b, 0x30, 0x4b, 0x73, 0x73, 0x78, 0x4c, 0x57, 0x4c, 0x49, 0x41, 0x73, 0x2f, 0x4f, 0xa, 0x47, 0x75, 0x65, 0x34, 0x45, 0x67, 0x72, 0x7a, 0x70, 0x56, 0x6b, 0x77, 0x55, 0x6a, 0x45, 0x4a, 0x6f, 0x6a, 0x57, 0x6c, 0x2f, 0x4f, 0x38, 0x43, 0x42, 0x52, 0x36, 0x59, 0x56, 0x78, 0x37, 0x42, 0x37, 0x79, 0x75, 0x55, 0x6e, 0x4b, 0x32, 0x35, 0x66, 0x71, 0x74, 0x39, 0x2f, 0x64, 0x38, 0x54, 0x75, 0x50, 0x63, 0x59, 0x47, 0x53, 0x65, 0x43, 0x71, 0x77, 0x3d, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}
	testSignedUPP     = []byte{0x95, 0x22, 0xc4, 0x10, 0x63, 0xd9, 0x76, 0x84, 0x1a, 0x63, 0x44, 0xa8, 0x8f, 0xc2, 0x30, 0x16, 0xf8, 0x7c, 0x15, 0x4, 0x0, 0xc4, 0x20, 0x41, 0x2c, 0xf8, 0xec, 0xb7, 0xb9, 0x41, 0xaa, 0x2b, 0x71, 0x1d, 0x40, 0xab, 0x68, 0xc4, 0x69, 0x36, 0x25, 0xe, 0x76, 0x67, 0x41, 0xd6, 0xfa, 0xeb, 0x31, 0xc5, 0x9d, 0x6b, 0xb0, 0x20, 0xfb, 0xc4, 0x40, 0xe7, 0xe6, 0x3, 0x1d, 0xa8, 0x18, 0x53, 0x2d, 0x7c, 0x77, 0xab, 0x9b, 0x67, 0xb, 0x64, 0x54, 0x8e, 0xb3, 0xeb, 0x7b, 0xd9, 0x77, 0x7f, 0x9, 0xdd, 0x79, 0x52, 0x8f, 0x92, 0x84, 0x8d, 0x78, 0xf7, 0x2e, 0xd, 0x27, 0x68, 0x7f, 0xb5, 0xe4, 0x61, 0xf9, 0x7e, 0x77, 0xf0, 0xd9, 0xe9, 0x25, 0xc, 0xdb, 0x51, 0x87, 0x78, 0xf6, 0x1f, 0x8c, 0x8d, 0xfd, 0x5b, 0x21, 0xa, 0x87, 0x58, 0x60}
	testSignedUPP_2   = []byte{0x95, 0x22, 0xc4, 0x10, 0x63, 0xd9, 0x76, 0x84, 0x1a, 0x63, 0x44, 0xa8, 0x8f, 0xc2, 0x30, 0x16, 0xf8, 0x7c, 0x15, 0x4, 0x0, 0xc4, 0x20, 0xcb, 0x9f, 0xe8, 0x25, 0x27, 0x18, 0xeb, 0x47, 0x56, 0xd8, 0xe9, 0x80, 0xad, 0xda, 0x90, 0xbc, 0xc0, 0xe1, 0xd6, 0xe6, 0xe, 0x8d, 0x62, 0x72, 0x18, 0x38, 0x2, 0x69, 0x92, 0xd5, 0x66, 0xee, 0xc4, 0x40, 0x92, 0x84, 0xaf, 0x1f, 0x8b, 0x75, 0x4, 0x13, 0x1, 0x43, 0xfa, 0x75, 0x50, 0x26, 0xb4, 0x2a, 0xdb, 0x38, 0xfd, 0xca, 0x67, 0x40, 0x60, 0xd1, 0x25, 0x52, 0x3a, 0xb2, 0xb1, 0x33, 0x95, 0xa9, 0x1c, 0x58, 0xa6, 0x14, 0x2c, 0x23, 0x36, 0xec, 0xe5, 0xd9, 0x6, 0x31, 0x1e, 0xb5, 0xed, 0x3a, 0xc6, 0xa4, 0xbe, 0xd7, 0x84, 0x91, 0x22, 0x5, 0xb8, 0xe3, 0xdf, 0x67, 0xe7, 0x6d, 0x88, 0x5e}
	testChainedUPP    = []byte{0x96, 0x23, 0xc4, 0x10, 0x63, 0xd9, 0x76, 0x84, 0x1a, 0x63, 0x44, 0xa8, 0x8f, 0xc2, 0x30, 0x16, 0xf8, 0x7c, 0x15, 0x4, 0xc4, 0x40, 0x5c, 0x16, 0xfe, 0x8d, 0xb3, 0x53, 0xb7, 0xee, 0x1c, 0xd4, 0xdb, 0x9e, 0x2c, 0xeb, 0xbf, 0xd6, 0xd1, 0x6b, 0x65, 0xfb, 0xf3, 0x62, 0xe9, 0x6e, 0x7d, 0x19, 0x62, 0x4c, 0xbb, 0xca, 0x45, 0x81, 0x7d, 0x73, 0x65, 0x59, 0x72, 0x7, 0xe0, 0x99, 0x36, 0x23, 0xc6, 0x74, 0xc5, 0xea, 0x31, 0x32, 0x7, 0xd0, 0xaf, 0x1a, 0x88, 0x24, 0x72, 0x75, 0x25, 0xef, 0x9c, 0x84, 0xc2, 0xc3, 0x37, 0xc6, 0x0, 0xc4, 0x20, 0x41, 0x2c, 0xf8, 0xec, 0xb7, 0xb9, 0x41, 0xaa, 0x2b, 0x71, 0x1d, 0x40, 0xab, 0x68, 0xc4, 0x69, 0x36, 0x25, 0xe, 0x76, 0x67, 0x41, 0xd6, 0xfa, 0xeb, 0x31, 0xc5, 0x9d, 0x6b, 0xb0, 0x20, 0xfb, 0xc4, 0x40, 0xe7, 0xe6, 0x3, 0x1d, 0xa8, 0x18, 0x53, 0x2d, 0x7c, 0x77, 0xab, 0x9b, 0x67, 0xb, 0x64, 0x54, 0x8e, 0xb3, 0xeb, 0x7b, 0xd9, 0x77, 0x7f, 0x9, 0xdd, 0x79, 0x52, 0x8f, 0x92, 0x84, 0x8d, 0x78, 0xf7, 0x2e, 0xd, 0x27, 0x68, 0x7f, 0xb5, 0xe4, 0x61, 0xf9, 0x7e, 0x77, 0xf0, 0xd9, 0xe9, 0x25, 0xc, 0xdb, 0x51, 0x87, 0x78, 0xf6, 0x1f, 0x8c, 0x8d, 0xfd, 0x5b, 0x21, 0xa, 0x87, 0x58, 0x60}
	testBckndRespUPP  = []byte{0x96, 0x23, 0xc4, 0x10, 0x9d, 0x3c, 0x78, 0xff, 0x22, 0xf3, 0x44, 0x41, 0xa5, 0xd1, 0x85, 0xc6, 0x36, 0xd4, 0x86, 0xff, 0xc4, 0x40, 0xe7, 0xe6, 0x3, 0x1d, 0xa8, 0x18, 0x53, 0x2d, 0x7c, 0x77, 0xab, 0x9b, 0x67, 0xb, 0x64, 0x54, 0x8e, 0xb3, 0xeb, 0x7b, 0xd9, 0x77, 0x7f, 0x9, 0xdd, 0x79, 0x52, 0x8f, 0x92, 0x84, 0x8d, 0x78, 0xf7, 0x2e, 0xd, 0x27, 0x68, 0x7f, 0xb5, 0xe4, 0x61, 0xf9, 0x7e, 0x77, 0xf0, 0xd9, 0xe9, 0x25, 0xc, 0xdb, 0x51, 0x87, 0x78, 0xf6, 0x1f, 0x8c, 0x8d, 0xfd, 0x5b, 0x21, 0xa, 0x87, 0x58, 0x60, 0x0, 0xc4, 0x20, 0xf3, 0x4c, 0xe3, 0x73, 0xd, 0xbf, 0x49, 0x9c, 0xac, 0x2b, 0xf8, 0x8, 0x7, 0xf, 0xd2, 0x8a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc4, 0x40, 0x75, 0x12, 0xa2, 0x75, 0x26, 0xed, 0x6b, 0x9e, 0xb5, 0x97, 0xaa, 0x84, 0x39, 0x3a, 0xc3, 0x2d, 0x7c, 0x7b, 0xa5, 0x19, 0x38, 0x9c, 0xf3, 0xde, 0x3c, 0x30, 0xbc, 0x88, 0x4a, 0x7a, 0x29, 0xe1, 0x62, 0x7a, 0x91, 0xb4, 0x99, 0x20, 0xfe, 0x2c, 0xd, 0xc7, 0xaf, 0x95, 0x41, 0x9d, 0x30, 0x64, 0xf6, 0xa8, 0xc0, 0xf1, 0xea, 0x35, 0x4c, 0x33, 0x25, 0x91, 0x2c, 0x32, 0xca, 0x87, 0x55, 0xbb}
	testRequestID     = "f34ce373-0dbf-499c-ac2b-f808070fd28a"
	testBckndResp     = h.HTTPResponse{
		StatusCode: http.StatusOK,
		Header:     http.Header{"test": []string{"header"}},
		Content:    testBckndRespUPP,
	}
	testBckndConflictResp = h.HTTPResponse{
		StatusCode: http.StatusConflict,
		Header:     http.Header{"X-Err": []string{"NF409-0000"}},
		Content:    testBckndRespUPP,
	}
	testVerificationResp = []byte(fmt.Sprintf("{\"upp\":\"%s\",\"prev\":null,\"anchors\":null}", base64.StdEncoding.EncodeToString(testSignedUPP)))
	testKeyRegs          = []ubirch.SignedKeyRegistration{{PubKeyInfo: ubirch.KeyRegistration{PubKey: base64.StdEncoding.EncodeToString(testPublicKey)}}}
)
